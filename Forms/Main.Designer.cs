/***************************************************************************
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) version 3.                                           *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.         *
 ***************************************************************************/

// This file has been generated by the GUI designer. Do not modify.
namespace Client.Forms
{
    public partial class Main
    {
        /// <summary>
        /// ??
        /// </summary>
        public global::Gtk.UIManager UIManager;
		/// <summary>
		/// The file action.
		/// </summary>
        public global::Gtk.Action FileAction;
		/// <summary>
		/// The shut down action.
		/// </summary>
        public global::Gtk.Action ShutDownAction;
		/// <summary>
		/// The tools action.
		/// </summary>
        public global::Gtk.Action ToolsAction;
		/// <summary>
		/// The misc action.
		/// </summary>
        public global::Gtk.Action MiscAction;
		/// <summary>
		/// The show action.
		/// </summary>
        public global::Gtk.Action ShowAction;
		/// <summary>
		/// The user action.
		/// </summary>
        public global::Gtk.Action UserAction;
		/// <summary>
		/// The help action.
		/// </summary>
        public global::Gtk.Action HelpAction;
		/// <summary>
		/// The about action.
		/// </summary>
        public global::Gtk.Action AboutAction;
		/// <summary>
		/// The contents action.
		/// </summary>
        public global::Gtk.Action ContentsAction;
		/// <summary>
		/// The root action.
		/// </summary>
        public global::Gtk.Action RootAction;
		/// <summary>
		/// The search action.
		/// </summary>
        public global::Gtk.Action SearchAction;
		/// <summary>
		/// The switch to advanced layout action.
		/// </summary>
        public global::Gtk.Action SwitchToAdvancedLayoutAction;
		/// <summary>
		/// The configuration file action.
		/// </summary>
        public global::Gtk.Action ConfigurationFileAction;
		/// <summary>
		/// The open new connection action.
		/// </summary>
        public global::Gtk.Action OpenNewConnectionAction;
		/// <summary>
		/// The open new connection action1.
		/// </summary>
        public global::Gtk.Action OpenNewConnectionAction1;
		/// <summary>
		/// The favorite networks action.
		/// </summary>
        public global::Gtk.Action FavoriteNetworksAction;
		/// <summary>
		/// The preferences action.
		/// </summary>
        public global::Gtk.Action PreferencesAction;
		/// <summary>
		/// The packet viewer action.
		/// </summary>
        public global::Gtk.Action PacketViewerAction;
		/// <summary>
		/// The skin editor action.
		/// </summary>
        public global::Gtk.Action SkinEditorAction;
		/// <summary>
		/// The small chat action.
		/// </summary>
        public global::Gtk.Action SmallChatAction;
		/// <summary>
		/// The attach to micro chat action.
		/// </summary>
        public global::Gtk.Action AttachToMicroChatAction;
		/// <summary>
		/// The detach from micro chat action.
		/// </summary>
        public global::Gtk.Action DetachFromMicroChatAction;
		/// <summary>
		/// The load text to scrollback action.
		/// </summary>
        public global::Gtk.Action LoadTextToScrollbackAction;
		/// <summary>
		/// The load more to scrollback action.
		/// </summary>
        public global::Gtk.Action LoadMoreToScrollbackAction;
		/// <summary>
		/// The vbox3.
		/// </summary>
        public global::Gtk.VBox vbox3;
		/// <summary>
		/// The menubar2.
		/// </summary>
        public global::Gtk.MenuBar menubar2;
		/// <summary>
		/// The hpaned1.
		/// </summary>
        public global::Gtk.HPaned hpaned1;
		/// <summary>
		/// The pidgeonlist1.
		/// </summary>
        public global::Client.Graphics.PidgeonList pidgeonlist1;
		/// <summary>
		/// The tool strip.
		/// </summary>
        public global::Gtk.Statusbar toolStrip;
		/// <summary>
		/// The tool strip status network.
		/// </summary>
        public global::Gtk.Label toolStripStatusNetwork;
		/// <summary>
		/// The tool strip status channel.
		/// </summary>
        public global::Gtk.Label toolStripStatusChannel;
		/// <summary>
		/// The tool strip info.
		/// </summary>
        public global::Gtk.Label toolStripInfo;
		/// <summary>
		/// The tool strip progress bar1.
		/// </summary>
        public global::Gtk.ProgressBar toolStripProgressBar1;

        private void Build()
        {
            global::Stetic.Gui.Initialize(this);
            // Widget Client.Forms.Main
            this.UIManager = new global::Gtk.UIManager();
            global::Gtk.ActionGroup w1 = new global::Gtk.ActionGroup("Default");
            this.FileAction = new global::Gtk.Action("FileAction", messages.Localize("[[window-menu-file]]"), null, null);
            this.FileAction.ShortLabel = "File";
            w1.Add(this.FileAction, "<Alt>f");
            this.ShutDownAction = new global::Gtk.Action("ShutDownAction", messages.Localize("[[window-menu-quit]]"), null, null);
            this.ShutDownAction.ShortLabel = "Shut down";
            w1.Add(this.ShutDownAction, null);
            this.ToolsAction = new global::Gtk.Action("ToolsAction", messages.Localize("[[window-menu-tools]]"), null, null);
            this.ToolsAction.ShortLabel = "Tools";
            w1.Add(this.ToolsAction, "<Alt>t");
            this.MiscAction = new global::Gtk.Action("MiscAction", messages.Localize("[[window-menu-misc]]"), null, null);
            this.MiscAction.ShortLabel = "Misc";
            w1.Add(this.MiscAction, null);
            this.ShowAction = new global::Gtk.Action("ShowAction", messages.Localize("[[window-menu-show]]"), null, null);
            this.ShowAction.ShortLabel = "Show";
            w1.Add(this.ShowAction, null);
            this.UserAction = new global::Gtk.Action("UserAction", messages.Localize("[[window-menu-user]]"), null, null);
            this.UserAction.ShortLabel = "User";
            this.UserAction.Visible = false;
            w1.Add(this.UserAction, null);
            this.HelpAction = new global::Gtk.Action("HelpAction", messages.Localize("[[window-menu-help]]"), null, null);
            this.HelpAction.ShortLabel = "Help";
            w1.Add(this.HelpAction, null);
            this.AboutAction = new global::Gtk.Action("AboutAction", messages.Localize("[[window-menu-about]]"), null, null);
            this.AboutAction.ShortLabel = "About";
            w1.Add(this.AboutAction, null);
            this.ContentsAction = new global::Gtk.Action("ContentsAction", messages.Localize("[[window-menu-contents]]"), null, null);
            this.ContentsAction.ShortLabel = "Help";
            w1.Add(this.ContentsAction, "F1");
            this.RootAction = new global::Gtk.Action("RootAction", "Root", null, null);
            this.RootAction.ShortLabel = "Root";
            w1.Add(this.RootAction, null);
            this.SearchAction = new global::Gtk.Action("SearchAction", messages.Localize("[[window-menu-search]]"), null, null);
            this.SearchAction.ShortLabel = "Search";
            w1.Add(this.SearchAction, "<Primary>f");
            this.SwitchToAdvancedLayoutAction = new global::Gtk.Action("SwitchToAdvancedLayoutAction", "Switch to advanced layout", null, null);
            this.SwitchToAdvancedLayoutAction.ShortLabel = "Switch to advanced layout";
            w1.Add(this.SwitchToAdvancedLayoutAction, null);
            this.ConfigurationFileAction = new global::Gtk.Action("ConfigurationFileAction", "Configuration file", null, null);
            this.ConfigurationFileAction.ShortLabel = "Configuration file";
            w1.Add(this.ConfigurationFileAction, null);
            this.OpenNewConnectionAction = new global::Gtk.Action("OpenNewConnectionAction", "Open new connection", null, null);
            this.OpenNewConnectionAction.ShortLabel = "Open new connection";
            w1.Add(this.OpenNewConnectionAction, null);
            this.OpenNewConnectionAction1 = new global::Gtk.Action("OpenNewConnectionAction1", "Open new connection", null, null);
            this.OpenNewConnectionAction1.ShortLabel = "Open new connection";
            w1.Add(this.OpenNewConnectionAction1, "<Alt>n");
            this.FavoriteNetworksAction = new global::Gtk.Action("FavoriteNetworksAction", "Favorite networks", null, null);
            this.FavoriteNetworksAction.ShortLabel = "Favorite networks";
            w1.Add(this.FavoriteNetworksAction, null);
            this.PreferencesAction = new global::Gtk.Action("PreferencesAction", "Preferences", null, null);
            this.PreferencesAction.ShortLabel = "Preferences";
            w1.Add(this.PreferencesAction, "<Alt>p");
            this.PacketViewerAction = new global::Gtk.Action("PacketViewerAction", "Packet viewer", null, null);
            this.PacketViewerAction.ShortLabel = "Packet viewer";
            w1.Add(this.PacketViewerAction, "<Primary><Alt>p");
            this.SkinEditorAction = new global::Gtk.Action("SkinEditorAction", "Skin editor", null, null);
            this.SkinEditorAction.ShortLabel = "Skin editor";
            w1.Add(this.SkinEditorAction, null);
            this.SmallChatAction = new global::Gtk.Action("SmallChatAction", "Small chat", "Open a small window you can configure to contain a text from selected scrollbacks, so that you don't need to have large window open in order to watch channels", null);
            this.SmallChatAction.ShortLabel = "Small chat";
            w1.Add(this.SmallChatAction, null);
            this.AttachToMicroChatAction = new global::Gtk.Action("AttachToMicroChatAction", "Attach to micro chat", null, null);
            this.AttachToMicroChatAction.ShortLabel = "Attach to micro chat";
            w1.Add(this.AttachToMicroChatAction, "<Alt>m");
            this.DetachFromMicroChatAction = new global::Gtk.Action("DetachFromMicroChatAction", "Detach from micro chat", null, null);
            this.DetachFromMicroChatAction.ShortLabel = "Detach from micro chat";
            w1.Add(this.DetachFromMicroChatAction, "<Alt>d");
            this.LoadTextToScrollbackAction = new global::Gtk.Action("LoadTextToScrollbackAction", "Load text to scrollback", null, null);
            this.LoadTextToScrollbackAction.ShortLabel = "Load text to scrollback";
            w1.Add(this.LoadTextToScrollbackAction, null);
            this.LoadMoreToScrollbackAction = new global::Gtk.Action("LoadMoreToScrollbackAction", "Load more to scrollback", "This will load more text to scrollback from cache, by default scrollback contains only few lines for fast loading", null);
            this.LoadMoreToScrollbackAction.ShortLabel = "Load more to scrollback";
            w1.Add(this.LoadMoreToScrollbackAction, "<Primary>u");
            this.UIManager.InsertActionGroup(w1, 0);
            this.AddAccelGroup(this.UIManager.AccelGroup);
            this.Name = "Client.Forms.Main";
            this.Title = "Pidgeon Client";
            this.Icon = global::Gdk.Pixbuf.LoadFromResource("Client.Resources.pigeon_clip_art_hight.ico");
            this.WindowPosition = ((global::Gtk.WindowPosition)(4));
            // Container child Client.Forms.Main.Gtk.Container+ContainerChild
            this.vbox3 = new global::Gtk.VBox();
            this.vbox3.Name = "vbox3";
            this.vbox3.Spacing = 6;
            // Container child vbox3.Gtk.Box+BoxChild
            this.UIManager.AddUiFromString("<ui><menubar name='menubar2'><menu name='FileAction' action='FileAction'><menuitem name='OpenNewConnectionAction1' action='OpenNewConnectionAction1'/><separator/><menuitem name='FavoriteNetworksAction' action='FavoriteNetworksAction'/><separator/><menuitem name='PreferencesAction' action='PreferencesAction'/><separator/><menuitem name='ShutDownAction' action='ShutDownAction'/></menu><menu name='ToolsAction' action='ToolsAction'><menuitem name='PacketViewerAction' action='PacketViewerAction'/><menuitem name='SmallChatAction' action='SmallChatAction'/><separator/><menuitem name='AttachToMicroChatAction' action='AttachToMicroChatAction'/><menuitem name='DetachFromMicroChatAction' action='DetachFromMicroChatAction'/></menu><menu name='MiscAction' action='MiscAction'><menuitem name='SearchAction' action='SearchAction'/><menuitem name='LoadMoreToScrollbackAction' action='LoadMoreToScrollbackAction'/><separator/><menuitem name='ConfigurationFileAction' action='ConfigurationFileAction'/></menu><menu name='ShowAction' action='ShowAction'><menuitem name='RootAction' action='RootAction'/></menu><menu name='HelpAction' action='HelpAction'><menuitem name='AboutAction' action='AboutAction'/><menuitem name='ContentsAction' action='ContentsAction'/></menu></menubar></ui>");
            this.menubar2 = ((global::Gtk.MenuBar)(this.UIManager.GetWidget("/menubar2")));
            this.menubar2.Name = "menubar2";
            this.vbox3.Add(this.menubar2);
            global::Gtk.Box.BoxChild w2 = ((global::Gtk.Box.BoxChild)(this.vbox3[this.menubar2]));
            w2.Position = 0;
            w2.Expand = false;
            w2.Fill = false;
            // Container child vbox3.Gtk.Box+BoxChild
            this.hpaned1 = new global::Gtk.HPaned();
            this.hpaned1.CanFocus = true;
            this.hpaned1.Name = "hpaned1";
            this.hpaned1.Position = 183;
            // Container child hpaned1.Gtk.Paned+PanedChild
            this.pidgeonlist1 = new global::Client.Graphics.PidgeonList();
            this.pidgeonlist1.Events = ((global::Gdk.EventMask)(256));
            this.pidgeonlist1.Name = "pidgeonlist1";

            this.hpaned1.Add(this.pidgeonlist1);
            global::Gtk.Paned.PanedChild w3 = ((global::Gtk.Paned.PanedChild)(this.hpaned1[this.pidgeonlist1]));
            w3.Resize = false;
            this.vbox3.Add(this.hpaned1);
            global::Gtk.Box.BoxChild w4 = ((global::Gtk.Box.BoxChild)(this.vbox3[this.hpaned1]));
            w4.Position = 1;
            // Container child vbox3.Gtk.Box+BoxChild
            this.toolStrip = new global::Gtk.Statusbar();
            this.toolStrip.Name = "toolStrip";
            this.toolStrip.Spacing = 6;
            // Container child toolStrip.Gtk.Box+BoxChild
            this.toolStripStatusNetwork = new global::Gtk.Label();
            this.toolStripStatusNetwork.Name = "toolStripStatusNetwork";
            this.toolStrip.Add(this.toolStripStatusNetwork);
            global::Gtk.Box.BoxChild w5 = ((global::Gtk.Box.BoxChild)(this.toolStrip[this.toolStripStatusNetwork]));
            w5.Position = 0;
            w5.Expand = false;
            w5.Fill = false;
            // Container child toolStrip.Gtk.Box+BoxChild
            this.toolStripStatusChannel = new global::Gtk.Label();
            this.toolStripStatusChannel.Name = "toolStripStatusChannel";
            this.toolStrip.Add(this.toolStripStatusChannel);
            global::Gtk.Box.BoxChild w6 = ((global::Gtk.Box.BoxChild)(this.toolStrip[this.toolStripStatusChannel]));
            w6.Position = 1;
            w6.Expand = false;
            w6.Fill = false;
            // Container child toolStrip.Gtk.Box+BoxChild
            this.toolStripInfo = new global::Gtk.Label();
            this.toolStripInfo.Name = "toolStripInfo";
            this.toolStrip.Add(this.toolStripInfo);
            global::Gtk.Box.BoxChild w7 = ((global::Gtk.Box.BoxChild)(this.toolStrip[this.toolStripInfo]));
            w7.Position = 3;
            w7.Expand = false;
            w7.Fill = false;
            // Container child toolStrip.Gtk.Box+BoxChild
            this.toolStripProgressBar1 = new global::Gtk.ProgressBar();
            this.toolStripProgressBar1.Name = "toolStripProgressBar1";
            this.toolStrip.Add(this.toolStripProgressBar1);
            global::Gtk.Box.BoxChild w8 = ((global::Gtk.Box.BoxChild)(this.toolStrip[this.toolStripProgressBar1]));
            w8.Position = 4;
            this.vbox3.Add(this.toolStrip);
            global::Gtk.Box.BoxChild w9 = ((global::Gtk.Box.BoxChild)(this.vbox3[this.toolStrip]));
            w9.Position = 2;
            w9.Expand = false;
            w9.Fill = false;
            this.Add(this.vbox3);
            if ((this.Child != null))
            {
                this.Child.ShowAll();
            }
            this.DefaultWidth = 1018;
            this.DefaultHeight = 600;
            this.Show();
            this.DeleteEvent += new global::Gtk.DeleteEventHandler(this.Unshow);
            this.ShutDownAction.Activated += new global::System.EventHandler(this.shutDownToolStripMenuItem_Click);
            this.AboutAction.Activated += new global::System.EventHandler(this.aboutToolStripMenuItem_Click);
            this.OpenNewConnectionAction1.Activated += new global::System.EventHandler(this.newConnectionToolStripMenuItem_Click_1);
            this.PreferencesAction.Activated += new global::System.EventHandler(this.preferencesToolStripMenuItem_Click);
            this.PacketViewerAction.Activated += new global::System.EventHandler(this.toolStripMenuItem3_Click);
            this.SmallChatAction.Activated += new global::System.EventHandler(this.taskbarBoxToolStripMenuItem_Click);
            this.AttachToMicroChatAction.Activated += new global::System.EventHandler(this.attachToMicroChatToolStripMenuItem_Click);
            this.DetachFromMicroChatAction.Activated += new global::System.EventHandler(this.detachFromMicroChatToolStripMenuItem_Click);
        }
    }
}
